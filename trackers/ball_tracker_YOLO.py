from ultralytics import YOLO
import cv2
import pickle 
import pandas as pd 
import librosa 
import numpy as np 
import matplotlib.pyplot as plt
from scipy.signal import find_peaks, butter, sosfilt



class BallTracker:
    def __init__(self, model_path):
        self.model = YOLO(model_path)

    
    def interpolate_ball_positions(self, ball_positions):
        """
        Interpolate the ball positions whenever there is no ball detected by our model.
        
        """
        # Get the ball positions (or [], if there was no ball found in the frame)
        ball_positions = [x.get(1, []) for x in ball_positions]

        # Turn into dataframe (since pandas has a interpolate function)
        df_ball_positions = pd.DataFrame(ball_positions, columns = ["x1" , "y1" , "x2" , "y2"])

        # Interpolate missing values 
        df_ball_positions = df_ball_positions.interpolate()

        # Handle the case of no initial ball tracking (i.e. we need some tracking information
        # from the first frame for the interpolation to work)
        # We handle this by just filling all the first frames with the first detection of the ball
        df_ball_positions = df_ball_positions.bfill()

        # Turn again into original format (dictionary with key 1 and value the bounding box coordinates)
        ball_positions = [{1:x} for x in df_ball_positions.to_numpy().tolist()]

        return ball_positions

        

    def detect_frames(self, frames, read_from_stub = False, stub_path = None):
        """
        Iterate over all the frames of the video, and
        collect the found ball.

        Args:
            frames : All the frames of the video.
            read_from_stub (bool) : Store ball detections. 
            stub_path (str) : Path to store ball detections in.

        Returns:
            ball_detections (List of Dicts) : List 
            of the Dicts generated by 'detect_frame'.
        """
        ball_detections = []

        # Load stored detected ball informations
        if stub_path is not None and read_from_stub:
            with open(stub_path, 'rb') as f:
                ball_detections = pickle.load(f)
            return ball_detections 

        for frame in frames:
            ball_dict = self.detect_frame(frame)
            ball_detections.append(ball_dict)

        # Store detected ball information
        if stub_path is not None: 
            with open(stub_path, 'wb') as f:
                pickle.dump(ball_detections, f)


        return ball_detections 
    
    def get_ball_shot_frames_audio(self, audio_file, fps, plot=True):
        # Load the audio file
        y, sr = librosa.load(audio_file, sr=None)
        
        # Apply bandpass filter (150Hz-1800Hz)
        nyquist = 0.5 * sr
        low = 150 / nyquist
        high = 1800 / nyquist
        sos = butter(N=6, Wn=[low, high], btype='band', output='sos')
        y_filtered = sosfilt(sos, y)
        
        # Compute the envelope of the filtered signal
        y_abs = np.abs(y_filtered)
        
        # Apply smoothing to the envelope (adjust window_size as needed)
        window_size = int(0.01 * sr)  # 10ms window
        y_envelope = np.convolve(y_abs, np.ones(window_size)/window_size, mode='same')
        
        # Find peaks in the envelope
        # Lower height threshold to catch more peaks
        peaks, _ = find_peaks(y_envelope, 
                            height=0.02,  # Lower threshold to catch more peaks
                            distance=int(0.3 * sr),  # Minimum distance between peaks
                            prominence=0.01)  # Find all distinct peaks 
        
        # Convert peak positions to time (seconds)
        hit_times = peaks / sr
        
        # Convert times to frame numbers
        hit_frames = [int(round(time * fps)) for time in hit_times]
        
        if plot:
            plt.figure(figsize=(12, 10))
            
            # Plot filtered waveform with detected hits
            plt.subplot(3, 1, 1)
            times = np.linspace(0, len(y_filtered)/sr, len(y_filtered))
            plt.plot(times, y_filtered)
            plt.vlines(hit_times, -0.2, 0.2, color='r', linewidth=1)
            plt.title('Filtered Audio Waveform (150Hz-1800Hz) with Detected Hits')
            plt.xlabel('Time (s)')
            
            # Plot the envelope with detected peaks
            plt.subplot(3, 1, 2)
            plt.plot(times, y_envelope)
            plt.vlines(hit_times, 0, np.max(y_envelope), color='r', linewidth=1, label='Detected Hits')
            plt.title('Signal Envelope with Detected Peaks')
            plt.xlabel('Time (s)')
            plt.legend()
            
            # Plot frame numbers
            plt.subplot(3, 1, 3)
            frame_times = np.arange(0, len(y_filtered)/sr, 1/fps)
            frame_indices = np.arange(0, len(frame_times))
            if len(frame_times) > 1000:  # If too many frames, subsample for clarity
                step = len(frame_times) // 1000
                frame_times = frame_times[::step]
                frame_indices = frame_indices[::step]
            plt.plot(frame_times, frame_indices, 'b-', alpha=0.5)
            plt.scatter([hit_times], [hit_frames], color='r', s=50)
            for i, (t, f) in enumerate(zip(hit_times, hit_frames)):
                plt.annotate(f"Frame {f}", (t, f), xytext=(5, 5), textcoords='offset points')
            plt.title('Detected Hits by Frame Number')
            plt.xlabel('Time (s)')
            plt.ylabel('Frame Number')
            
            plt.tight_layout()
            plt.savefig("AUDIO.png")
            # plt.show()
        
      #  print(f"Detected {len(hit_frames)} racket hits at frames: {hit_frames}")
        return hit_frames
    
    def get_ball_shot_frames(self,ball_positions):
        """
        Get the frames where the ball was hit by the player
        
        Args:
            ball_positions : List of the ball positions in the video frames
        
        Returns:
            frame_nums_with_ball_hits : List of the frame numbers where the ball was hit by the player.
        """
        
        ball_positions = [x.get(1,[]) for x in ball_positions]
        # convert the list into pandas dataframe
        df_ball_positions = pd.DataFrame(ball_positions,columns=['x1','y1','x2','y2'])

        df_ball_positions['ball_hit'] = 0

        df_ball_positions['mid_y'] = (df_ball_positions['y1'] + df_ball_positions['y2'])/2
        df_ball_positions['mid_y_rolling_mean'] = df_ball_positions['mid_y'].rolling(window=5, min_periods=1, center=False).mean()
        df_ball_positions['delta_y'] = df_ball_positions['mid_y_rolling_mean'].diff()
        minimum_change_frames_for_hit = 25
        for i in range(1,len(df_ball_positions)- int(minimum_change_frames_for_hit*1.2) ):
            negative_position_change = df_ball_positions['delta_y'].iloc[i] >0 and df_ball_positions['delta_y'].iloc[i+1] <0
            positive_position_change = df_ball_positions['delta_y'].iloc[i] <0 and df_ball_positions['delta_y'].iloc[i+1] >0

            if negative_position_change or positive_position_change:
                change_count = 0 
                for change_frame in range(i+1, i+int(minimum_change_frames_for_hit*1.2)+1):
                    negative_position_change_following_frame = df_ball_positions['delta_y'].iloc[i] >0 and df_ball_positions['delta_y'].iloc[change_frame] <0
                    positive_position_change_following_frame = df_ball_positions['delta_y'].iloc[i] <0 and df_ball_positions['delta_y'].iloc[change_frame] >0

                    if negative_position_change and negative_position_change_following_frame:
                        change_count+=1
                    elif positive_position_change and positive_position_change_following_frame:
                        change_count+=1
            
                if change_count>minimum_change_frames_for_hit-1:
                    df_ball_positions.loc[i,'ball_hit'] = 1

        frame_nums_with_ball_hits = df_ball_positions[df_ball_positions['ball_hit']==1].index.tolist()

        return frame_nums_with_ball_hits
    
    
    def detect_frame(self, frame):
        """
        Frame by frame, detect the ball and track them

        Args:
            frame : the frame to be analyzed 

        Returns: 
            ball_dict (dict) : Dictionary of the found ball,
                                 given by its id (key) and 
                                 bounding box coordinates (value).     
        """

        # Predict at a low confidence level (since only trained on the ball)
        # set max_det to 1, as we are only tracking one ball 
        results = self.model.predict(frame, conf=0.15, max_det = 1)[0]

        # Store ball with bounding box, i.e.
        # key : ID, value : bounding box (x_min,y_min,x_max,y_max)
        ball_dict = {}

        # Get the bounding box (x_min,y_min,x_max,y_max)
        # Check initially if it found any ball
        if results.boxes:
            result = results.boxes[0].xyxy.tolist()[0]
            # Store result
            ball_dict[1] = result

        return ball_dict 
    

    def draw_bboxes(self, video_frames, ball_detections):
        """
        Draw bounding box for the ball.

        Args:
            video_frames : List of all the frames of the video.
            ball_detections : List returned by 'detect_frames()'.
        
        Returns:
            output_video_frames : Frames of the video, now annotated
                                  with bounding boxe for ball.
        
        
        """
        output_video_frames = []
        for frame, ball_dict in zip(video_frames, ball_detections):
            # Draw bounding boxes 
            for track_id, bbox in ball_dict.items():
                # extract coordinates of the bounding box
                x1, y1, x2, y2 = bbox
                # Draw text indicating the Player ID 
                cv2.putText(frame, f"Ball ", (int(x1), int(y1) - 5),cv2.FONT_HERSHEY_PLAIN, 0.8, (0,255,255), 2)
                # Draw the rectangle onto the frame
                cv2.rectangle(frame , (int(x1), int(y1)), (int(x2), int(y2)), (0,255,255), 2)

            output_video_frames.append(frame)
        
        return output_video_frames
    

    def draw_ball_hits(self, video_frames, hit_frames):

        output_video_frames = []
        counter = 0
        for i,frame in enumerate(video_frames):
            cv2.putText(frame, f"Racket Hit n. {counter}", (10,200), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,255), 1)
            if i in hit_frames:
                counter += 1

        
            output_video_frames.append(frame)
        
        return output_video_frames 

            








