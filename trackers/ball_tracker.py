from ultralytics import YOLO
import cv2
import pickle 
import pandas as pd 
class BallTracker:
    def __init__(self, model_path):
        self.model = YOLO(model_path)

    
    def interpolate_ball_positions(self, ball_positions):
        """
        Interpolate the ball positions whenever there is no ball detected by our model.
        
        """
        # Get the ball positions (or [], if there was no ball found in the frame)
        ball_positions = [x.get(1, []) for x in ball_positions]

        # Turn into dataframe (since pandas has a interpolate function)
        df_ball_positions = pd.DataFrame(ball_positions, columns = ["x1" , "y1" , "x2" , "y2"])

        # Interpolate missing values 
        df_ball_positions = df_ball_positions.interpolate()

        # Handle the case of no initial ball tracking (i.e. we need some tracking information
        # from the first frame for the interpolation to work)
        # We handle this by just filling all the first frames with the first detection of the ball
        df_ball_positions = df_ball_positions.bfill()

        # Turn again into original format (dictionary with key 1 and value the bounding box coordinates)
        ball_positions = [{1:x} for x in df_ball_positions.to_numpy().tolist()]

        return ball_positions

        

    def detect_frames(self, frames, read_from_stub = False, stub_path = None):
        """
        Iterate over all the frames of the video, and
        collect the found ball.

        Args:
            frames : All the frames of the video.
            read_from_stub (bool) : Store ball detections. 
            stub_path (str) : Path to store ball detections in.

        Returns:
            ball_detections (List of Dicts) : List 
            of the Dicts generated by 'detect_frame'.
        """
        ball_detections = []

        # Load stored detected ball informations
        if stub_path is not None and read_from_stub:
            with open(stub_path, 'rb') as f:
                ball_detections = pickle.load(f)
            return ball_detections 

        for frame in frames:
            ball_dict = self.detect_frame(frame)
            ball_detections.append(ball_dict)

        # Store detected ball information
        if stub_path is not None: 
            with open(stub_path, 'wb') as f:
                pickle.dump(ball_detections, f)


        return ball_detections 
    
    def detect_frame(self, frame):
        """
        Frame by frame, detect the ball and track them

        Args:
            frame : the frame to be analyzed 

        Returns: 
            ball_dict (dict) : Dictionary of the found ball,
                                 given by its id (key) and 
                                 bounding box coordinates (value).     
        """

        # Predict at a low confidence level (since only trained on the ball)
        # set max_det to 1, as we are only tracking one ball 
        results = self.model.predict(frame, conf=0.15, max_det = 1)[0]

        # Store ball with bounding box, i.e.
        # key : ID, value : bounding box (x_min,y_min,x_max,y_max)
        ball_dict = {}

        # Get the bounding box (x_min,y_min,x_max,y_max)
        # Check initially if it found any ball
        if results.boxes:
            result = results.boxes[0].xyxy.tolist()[0]
            # Store result
            ball_dict[1] = result

        return ball_dict 
    

    def draw_bboxes(self, video_frames, ball_detections):
        """
        Draw bounding box for the ball.

        Args:
            video_frames : List of all the frames of the video.
            ball_detections : List returned by 'detect_frames()'.
        
        Returns:
            output_video_frames : Frames of the video, now annotated
                                  with bounding boxe for ball.
        
        
        """
        output_video_frames = []
        for frame, ball_dict in zip(video_frames, ball_detections):
            # Draw bounding boxes 
            for track_id, bbox in ball_dict.items():
                # extract coordinates of the bounding box
                x1, y1, x2, y2 = bbox
                # Draw text indicating the Player ID 
                cv2.putText(frame, f"Ball ", (int(x1), int(y1) - 5),cv2.FONT_HERSHEY_PLAIN, 0.8, (0,0,255), 2)
                # Draw the rectangle onto the frame
                cv2.rectangle(frame , (int(x1), int(y1)), (int(x2), int(y2)), (0,0,255), 2)

            output_video_frames.append(frame)
        
        return output_video_frames






